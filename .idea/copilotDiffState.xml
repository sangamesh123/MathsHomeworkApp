<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/infovsn/homework/Division.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/infovsn/homework/Division.java" />
              <option name="originalContent" value="package com.infovsn.homework;&#10;&#10;import android.graphics.Color;&#10;import android.os.Bundle;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import android.text.SpannableString;&#10;import android.text.method.ScrollingMovementMethod;&#10;import android.text.style.ForegroundColorSpan;&#10;import android.text.style.UnderlineSpan;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;&#10;import com.google.android.gms.ads.AdRequest;&#10;import com.google.android.gms.ads.AdView;&#10;&#10;public class Division extends AppCompatActivity {&#10;    private AdView mAdView;&#10;    Button b1,b2,b3,b4,b5,b6,b7,b8,b9,b0,badd,bclr,back;&#10;    TextView et;&#10;    ImageButton bsp, beq;&#10;    TextView at,kt,qt;&#10;    long val1=0,val2=0;&#10;    int move=0;&#10;    boolean add;&#10;    boolean pms=false;&#10;    boolean down=false;&#10;    int move2=0;&#10;    String ipl=&quot;&quot;;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_division);&#10;        FontUtils.applyToActivity(this);&#10;&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;&#10;&#10;        b1=(Button) findViewById(R.id.one);&#10;        b2=(Button) findViewById(R.id.two);&#10;        b3=(Button) findViewById(R.id.three);&#10;        b4=(Button) findViewById(R.id.four);&#10;        b5=(Button) findViewById(R.id.five);&#10;        b6=(Button) findViewById(R.id.six);&#10;        b7=(Button) findViewById(R.id.seven);&#10;        b8=(Button) findViewById(R.id.eight);&#10;        b9=(Button) findViewById(R.id.nine);&#10;        b0=(Button) findViewById(R.id.zero);&#10;        badd=(Button) findViewById(R.id.add);&#10;        bsp=(ImageButton) findViewById(R.id.backspace);&#10;        bclr=(Button) findViewById(R.id.clear);&#10;        beq=(ImageButton) findViewById(R.id.equal);&#10;        et=(TextView) findViewById(R.id.txtScreen);&#10;        et.setMovementMethod(new ScrollingMovementMethod());&#10;        b1.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;1&quot;);&#10;            }&#10;        });&#10;        b2.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;2&quot;);&#10;            }&#10;        });&#10;        b3.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;3&quot;);&#10;            }&#10;        });&#10;        b4.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;4&quot;);&#10;            }&#10;        });&#10;        b5.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;5&quot;);&#10;            }&#10;        });&#10;        b6.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;6&quot;);&#10;            }&#10;        });&#10;        b7.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;7&quot;);&#10;            }&#10;        });&#10;        b8.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;8&quot;);&#10;            }&#10;        });&#10;        b9.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;9&quot;);&#10;            }&#10;        });&#10;        b0.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;0&quot;);&#10;            }&#10;        });&#10;&#10;&#10;        badd.setOnClickListener(new View.OnClickListener() {&#10;&#10;            @Override&#10;            public void onClick(View v) {&#10;//                val1=Integer.parseInt(et.getText()+&quot;&quot;);&#10;                String mm=et.getText().toString();&#10;                if(!mm.contains(&quot;\u00F7&quot;)) {&#10;                    et.setText(et.getText()+&quot;\n&quot;+&quot;\u00F7&quot;+&quot; &quot;);&#10;                }&#10;            }&#10;        });&#10;&#10;        bclr.setOnClickListener(new View.OnClickListener() {&#10;&#10;            @Override&#10;            public void onClick(View v) {&#10;//                val1=Integer.parseInt(et.getText()+&quot;&quot;);&#10;//                add=true;&#10;                et.setText(null);&#10;            }&#10;        });&#10;&#10;        bsp.setOnClickListener(new View.OnClickListener() {&#10;&#10;            @Override&#10;            public void onClick(View v) {&#10;//                val1=Integer.parseInt(et.getText()+&quot;&quot;);&#10;//                add=true;&#10;                String smp = et.getText().toString();&#10;                if (smp.length() &gt; 1) {&#10;                    char qq2=smp.charAt(smp.length()-1);&#10;                    if(qq2==' ')&#10;                    {&#10;                        smp = smp.substring(0, smp.length() - 2);&#10;                    }&#10;                    else&#10;                        smp = smp.substring(0, smp.length() - 1);&#10;                    et.setText(smp);&#10;                    char qq=smp.charAt(smp.length()-1);&#10;                    if(qq=='\n')&#10;                    {&#10;                        smp = smp.substring(0, smp.length() - 1);&#10;                        et.setText(smp);&#10;                    }&#10;                } else if (smp.length() &lt;= 1) {&#10;                    et.setText(null);&#10;                }&#10;&#10;            }&#10;        });&#10;&#10;        beq.setOnClickListener(new View.OnClickListener() {&#10;&#10;            @Override&#10;            public void onClick(View v) {&#10;                setContentView(R.layout.division);&#10;                FontUtils.applyToActivity(Division.this);&#10;                at=(TextView) findViewById(R.id.txtScr);&#10;                at.setMovementMethod(new ScrollingMovementMethod());&#10;                kt=(TextView) findViewById(R.id.txtdiv);&#10;                kt.setMovementMethod(new ScrollingMovementMethod());&#10;                qt=(TextView) findViewById(R.id.quot);&#10;                qt.setMovementMethod(new ScrollingMovementMethod());&#10;&#10;                // Apply monospace only to divisor and quotient for consistent top-line spacing&#10;                at.setTypeface(FontUtils.getRobotoMono(Division.this));&#10;                qt.setTypeface(FontUtils.getRobotoMono(Division.this));&#10;&#10;                //ADDS BY GOOGLE&#10;                mAdView=(AdView)findViewById(R.id.adView);&#10;//                mAdView.setAdListener(new ToastAdListener(Division.this));&#10;                AdRequest adRequest =new AdRequest.Builder().build();&#10;                mAdView.loadAd(adRequest);&#10;&#10;                long v1=0,v2=1;&#10;                String txt = et.getText() + &quot;&quot;;&#10;                if(!txt.contains(&quot;\u00F7&quot;)) {&#10;                    txt=txt+&quot;\n&quot; + &quot;\u00F7 &quot;;&#10;                }&#10;&#10;                int tm=0;&#10;                String yn=&quot;&quot;;&#10;                String zn=&quot;&quot;;&#10;                String[] split = txt.split(&quot;\n&quot;);&#10;&#10;                for (int i = 0; i &lt; split.length; i++) {&#10;                    if (i == 0) {&#10;                        yn = split[i];&#10;&#10;                        if(yn.length()==0)&#10;                        {&#10;                            v1=0;&#10;                            yn=0+&quot;&quot;;&#10;                            tm++;&#10;                        }&#10;                        else {&#10;                            if(yn.length()&gt;10)&#10;                            {&#10;                                v1=0;&#10;                                tm=4;&#10;                            }&#10;                            else&#10;                                 v1 = Long.parseLong(yn);&#10;                        }&#10;                    }&#10;                    if (i &gt; 0) {&#10;                        zn = split[i].substring(2);&#10;&#10;                        if(zn.length()==0)&#10;                        {&#10;                            v2=1;&#10;                            zn=1+&quot;&quot;;&#10;                            tm=3;&#10;&#10;                            if(tm==1)&#10;                            {&#10;                                v1=0;&#10;                                v2=1;&#10;                                zn=1+&quot;&quot;;&#10;                            }&#10;                        }&#10;                        else&#10;                        {&#10;                            if((zn.length())&gt;4)&#10;                            {&#10;                                v2=1;&#10;                                zn=1+&quot;&quot;;&#10;                                tm=5;&#10;                            }&#10;                            else&#10;                                v2=Long.parseLong(zn);&#10;                        }&#10;&#10;                    }&#10;                }&#10;&#10;                if(v2==0)&#10;                {&#10;                    tm=6;&#10;                    v2=1;&#10;                }&#10;&#10;&#10;                at.setText(zn);&#10;                String pn=&quot;)&quot;;&#10;                SpannableString ssp1=new SpannableString(pn);&#10;//                ssp1.setSpan(new RelativeSizeSpan(1.1f),0,1,0);&#10;                ssp1.setSpan(new ForegroundColorSpan(Color.RED),0,ssp1.length(),0);&#10;                at.append(ssp1);&#10;                long v3=v1/v2;&#10;                String qu=v3+&quot;&quot;;&#10;&#10;                // Build fractional quotient (decimal expansion) with limits:&#10;                // - fractional part: up to 5 digits&#10;                // - total digits (integer + fractional): up to 10 digits&#10;                long rem = v1 % v2;&#10;                StringBuilder displayQuot = new StringBuilder(qu);&#10;                StringBuilder quotientDigits = new StringBuilder(qu); // digits only for step logic&#10;                int decCount = 0;&#10;                int intPartLen = qu.length();&#10;&#10;                if (intPartLen &gt;= 10) {&#10;                    // Cap quotient to 10 integer digits, no decimals&#10;                    String capped = qu.substring(0, 10);&#10;                    displayQuot = new StringBuilder(capped);&#10;                    quotientDigits = new StringBuilder(capped);&#10;                    decCount = 0;&#10;                } else {&#10;                    int allowedDec = Math.min(5, 10 - intPartLen);&#10;                    if(rem != 0 &amp;&amp; allowedDec &gt; 0) {&#10;                        displayQuot.append('.');&#10;                        while(rem != 0 &amp;&amp; decCount &lt; allowedDec) {&#10;                            rem *= 10;&#10;                            long d = rem / v2;&#10;                            quotientDigits.append(d);&#10;                            displayQuot.append(d);&#10;                            rem = rem % v2;&#10;                            decCount++;&#10;                        }&#10;                    }&#10;                }&#10;&#10;                qt.setText(displayQuot.toString());&#10;                kt.setText(yn);&#10;                kt.append(&quot;\n&quot;);&#10;                String quotient=&quot;&quot;;&#10;                String remender=&quot;&quot;;&#10;                // Use full digits (integer + decimal) for step logic&#10;                quotient=quotientDigits.toString();&#10;                long v4=0;&#10;                String divv=&quot;&quot;;&#10;                String cur=&quot;&quot;;&#10;                long just1=0,just2=0;&#10;                int j=0,k=0;&#10;&#10;                // Prepare extended dividend with borrowed zeros for decimal part&#10;                StringBuilder zerosForYn = new StringBuilder();&#10;                for(int z=0; z&lt;decCount; z++) zerosForYn.append('0');&#10;                String ynExt = yn + zerosForYn.toString();&#10;&#10;                for(int i=0;i&lt;quotient.length();i++)&#10;                {&#10;&#10;                    // Keep old special-case breaks only for pure integer divisions&#10;                    if(i==0 &amp;&amp; decCount==0)&#10;                    {&#10;                        if((quotient.length()==2)&amp;&amp;(quotient.charAt(1)=='0'))&#10;                        {&#10;                            v4=v3*v2;&#10;                            remender=v4+&quot;\n&quot;;&#10;                            kt.append(remender);&#10;                            divv=v1+&quot;&quot;;&#10;                            divv=divv+&quot;\n&quot;+v4;&#10;                            divisioned(divv);&#10;                            pms=true;&#10;                            break;&#10;                        }&#10;                        else&#10;                        {&#10;                            if(quotient.charAt(0)=='0')&#10;                            {&#10;                                v4=v3*v2;&#10;                                remender=v4+&quot;\n&quot;;&#10;                                String mt=&quot;&quot;;&#10;                                if(yn.length()&gt;remender.length())&#10;                                {&#10;                                        for(int x=0;x&lt;((yn.length()-1));x++)&#10;                                        {&#10;                                           mt=mt+&quot;0&quot;;&#10;                                        }&#10;&#10;                                }&#10;                                if(yn.length()==2)&#10;                                    mt=&quot;0&quot;;&#10;                                SpannableString ss6 = new SpannableString(mt);&#10;                                ss6.setSpan(new ForegroundColorSpan(Color.WHITE), 0, ss6.length(), 0);&#10;                                kt.append(ss6);&#10;                                kt.append(remender);&#10;                                divv=v1+&quot;&quot;;&#10;                                divv=divv+&quot;\n&quot;+v4;&#10;                                divisioned(divv);&#10;                                pms=true;&#10;                                break;&#10;                            }&#10;                        }&#10;                    }&#10;                    if(val1!=0)&#10;                         cur=val1+&quot;&quot;;&#10;                    else&#10;                    {&#10;                        if((i!=0)&amp;&amp;(v4!=0))&#10;                            move++;&#10;                    }&#10;&#10;                    String tmt=&quot;&quot;;&#10;                    String t=&quot;&quot;;&#10;                    t=quotient.charAt(i)+&quot;&quot;;&#10;                    just1=Long.parseLong(t);&#10;                    v4=just1*v2;&#10;                    if(v4!=0)&#10;                    {&#10;                        String df=v4+&quot;&quot;;&#10;                        for(int g=j;g&lt;ynExt.length();g++)&#10;                        {&#10;                            if(df.length()&gt;cur.length())&#10;                            {&#10;                                k++;&#10;                                cur=cur+ynExt.substring(j,k);&#10;                                tmt=tmt+ynExt.substring(j,k);&#10;                                j++;&#10;                            }&#10;                            else&#10;                            {&#10;                                just2=Long.parseLong(cur);&#10;                                if(v4&gt;just2)&#10;                                {&#10;                                    k++;&#10;                                    cur=cur+ynExt.substring(j,k);&#10;                                    tmt=tmt+ynExt.substring(j,k);&#10;                                    j++;&#10;                                    move2++;&#10;                                    down=true;&#10;                                }&#10;                            }&#10;&#10;                        }&#10;                        if(i!=0)&#10;                        {&#10;                            kt.append(tmt);&#10;                        }&#10;                        String nt=&quot;&quot;;&#10;                        remender=v4+&quot;\n&quot;;&#10;&#10;                        if(i!=0)&#10;                            kt.append(&quot;\n&quot;);&#10;                        for(int h=0;h&lt;move;h++)&#10;                        {&#10;                            nt=nt+&quot;0&quot;;&#10;&#10;                        }&#10;                        if(down)&#10;                        {&#10;                            for(int h=0;h&lt;move2;h++)&#10;                            {&#10;                                nt=nt+&quot;0&quot;;&#10;                            }&#10;                            down=false;&#10;                            move2=0;&#10;                        }&#10;                        SpannableString ss7 = new SpannableString(nt);&#10;                        ss7.setSpan(new ForegroundColorSpan(Color.WHITE), 0, ss7.length(), 0);&#10;                        kt.append(ss7);&#10;                        kt.append(remender);&#10;                        divv=cur;&#10;                        divv=divv+&quot;\n&quot;+v4;&#10;                        divisioned(divv);&#10;                        j=k;&#10;                        cur=&quot;&quot;;&#10;                    }&#10;&#10;                }&#10;&#10;                // If we produced decimal digits, skip the legacy trailing-digits append logic&#10;                if(decCount&gt;0) {&#10;                    pms = true;&#10;                }&#10;&#10;                if(!pms)&#10;                {&#10;                    String mane=&quot;&quot;;&#10;                    long meto=0;&#10;                   long abc=v3*v2;&#10;                    abc=v1-abc;&#10;&#10;                    if(k&lt;quotient.length())&#10;                    {&#10;                        mane=yn.substring(k,yn.length());&#10;                        meto=Long.parseLong(mane);&#10;                    }&#10;                    if(meto==abc)&#10;                    {&#10;                        kt.append(mane);&#10;                    }&#10;                   else if(abc&gt;val1)&#10;                    {&#10;                        String ipl2=abc+&quot;&quot;;&#10;                        int lle=ipl2.length();&#10;                        ipl=val1+&quot;&quot;;&#10;                        int lle2=ipl.length();&#10;                        for(int z=0;z&lt;lle-lle2;z++)&#10;                        {&#10;                            ipl=ipl+&quot;0&quot;;&#10;                        }&#10;                        val1=Long.parseLong(ipl);&#10;                        abc=abc-val1;&#10;                        ipl2=abc+&quot;&quot;;&#10;                        kt.append(ipl2);&#10;                    }&#10;&#10;&#10;                }&#10;&#10;                if(tm==1)&#10;                {&#10;                    qt.setText(&quot;0&quot;);&#10;                    kt.setText(&quot;0&quot;);&#10;                }&#10;                if(tm==3)&#10;                {&#10;                    at.setText(&quot;)&quot;);&#10;                    qt.setText(yn);&#10;                    kt.setText(yn);&#10;                }&#10;                if(tm==4)&#10;                {&#10;                    at.setText(null);&#10;                    qt.setText(null);&#10;                    kt.setText(&quot;Dividend exceeds maximum digits(10)&quot;);&#10;                }&#10;                if(tm==5)&#10;                {&#10;                    at.setText(null);&#10;                    qt.setText(null);&#10;                    kt.setText(&quot;Divisor exceeds maximum digits(4)&quot;);&#10;                }&#10;                if(tm==6)&#10;                {&#10;                    at.setText(&quot;0)&quot;);&#10;                    qt.setText(&quot;infinity&quot;);&#10;                    kt.setText(yn);&#10;                }&#10;                at.append(&quot;\n\n&quot;);&#10;//             sn=sn+ss1+&quot;\n&quot;+val1;&#10;//                et.setText(sn);&#10;&#10;            }&#10;        });&#10;    }&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        switch (item.getItemId()) {&#10;            case android.R.id.home:&#10;                // app icon in action bar clicked; goto parent activity.&#10;                this.finish();&#10;                return true;&#10;            default:&#10;                return super.onOptionsItemSelected(item);&#10;        }&#10;    }&#10;&#10;&#10;    public void divisioned(String sample)&#10;    {&#10;        String txt=sample;&#10;        String[] split=txt.split(&quot;\n&quot;);&#10;        String fn=&quot;&quot;;&#10;        String sn=&quot;&quot;;&#10;        String dn=&quot;&quot;;&#10;        long m=0,n=0;&#10;        long rem_m,rem_n,sum=0;&#10;        int c1=0,c2=0,c3=0,c4=0,c5=0,c6=0,c7=0,c8=0,c9=0,l=0;&#10;        for(int i=0;i&lt;split.length;i++)&#10;        {&#10;            int round=1;&#10;            if(i==0) {&#10;                fn = split[i];&#10;                dn=fn;&#10;                l = fn.length();&#10;            }&#10;            if(i&gt;0) {&#10;                fn = split[i];&#10;                if(l&lt;fn.length())&#10;                {&#10;                    l=fn.length();&#10;                }&#10;                if(fn.length()==0)&#10;                {&#10;                    fn=0+&quot;&quot;;&#10;                }&#10;            }&#10;            val2=Long.parseLong(fn);&#10;            n=val2;&#10;            while(m!=0 &amp;&amp; n!=0)&#10;            {&#10;                rem_m=m%10;&#10;                rem_n=n%10;&#10;&#10;                if(round==1)&#10;                {&#10;                    sum=rem_m-rem_n;&#10;                    if(sum&lt;0)&#10;                        c1++;&#10;                }&#10;                if(round==2)&#10;                {&#10;                    sum=rem_m-rem_n-c1;&#10;                    if(sum&lt;0)&#10;                        c2++;&#10;                }&#10;                if(round==3)&#10;                {&#10;                    sum=rem_m-rem_n-c2;&#10;                    if(sum&lt;0)&#10;                        c3++;&#10;                }&#10;                if(round==4)&#10;                {&#10;                    sum=rem_m-rem_n-c3;&#10;                    if(sum&lt;0)&#10;                        c4++;&#10;                }&#10;                if(round==5)&#10;                {&#10;                    sum=rem_m-rem_n-c4;&#10;                    if(sum&lt;0)&#10;                        c5++;&#10;                }&#10;                if(round==6)&#10;                {&#10;                    sum=rem_m-rem_n-c5;&#10;                    if(sum&lt;0)&#10;                        c6++;&#10;                }&#10;                if(round==7)&#10;                {&#10;                    sum=rem_m-rem_n-c6;&#10;                    if(sum&lt;0)&#10;                        c7++;&#10;                }&#10;                if(round==8)&#10;                {&#10;                    sum=rem_m-rem_n-c7;&#10;                    if(sum&lt;0)&#10;                        c8++;&#10;                }&#10;                if(round==9)&#10;                {&#10;                    sum=rem_m-rem_n-c8;&#10;                    if(sum&lt;0)&#10;                        c9++;&#10;                }&#10;&#10;&#10;                m=m/10;&#10;                n=n/10;&#10;                round++;&#10;            }&#10;            if(i==0)&#10;                val1=val2;&#10;            else&#10;                val1=val1-val2;&#10;            m=val1;&#10;        }&#10;&#10;&#10;//              val2 = Integer.parseInt(et.getText() + &quot;&quot;);&#10;//                if (add == true)&#10;//                    et.setText(null);&#10;//                    et.setText(val1 + val2 + &quot;&quot;);&#10;//                    add = false;&#10;//                }&#10;&#10;//        sn=sn+et.getText()+&quot;\n&quot;;&#10;//        kt.setText(sn);&#10;        String s3=&quot;&quot;;&#10;        int flag=0;&#10;//        int gr=8;&#10;//        if(l&gt;gr)&#10;//        {&#10;//            gr=l-1;&#10;//        }&#10;&#10;        for(int i=l-1;i&gt;0;i--)&#10;        {&#10;&#10;&#10;            if(i==9)&#10;            {&#10;                if((c9&gt;0)) {&#10;                    s3 = s3 + c9 + &quot;&quot;;&#10;                    flag=1;&#10;                }&#10;                else&#10;                    s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==8)&#10;            {&#10;                if((c8&gt;0)) {&#10;                    s3 = s3 + c8 + &quot;&quot;;&#10;                    flag=1;&#10;                }&#10;                else&#10;                    s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==7)&#10;            {if((c7&gt;0))&#10;            {&#10;                s3=s3+c7+&quot;&quot;;&#10;                flag=1;}&#10;            else&#10;                s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==6)&#10;            {if((c6&gt;0)) {&#10;                s3 = s3 + c6 + &quot;&quot;;&#10;                flag = 1;&#10;            }&#10;            else&#10;                s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==5)&#10;            {if((c5&gt;0)) {&#10;                s3 = s3 + c5 + &quot;&quot;;&#10;                flag = 1;&#10;            }&#10;            else&#10;                s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==4)&#10;            {if((c4&gt;0)) {&#10;                s3 = s3 + c4 + &quot;&quot;;&#10;                flag = 1;&#10;            }&#10;            else&#10;                s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==3)&#10;            {&#10;                if((c3&gt;0)) {&#10;                    s3 = s3 + c3 + &quot;&quot;;&#10;                    flag = 1;&#10;                }&#10;                else&#10;                    s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==2)&#10;            {if((c2&gt;0))&#10;            {&#10;                s3=s3+c2+&quot;&quot;;&#10;                flag=1;}&#10;            else&#10;                s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==1)&#10;            {if((c1&gt;0)) {&#10;                s3 = s3 + c1 + &quot;&quot;;&#10;                flag = 1;&#10;            }&#10;            else&#10;                s3=s3+&quot;  &quot;;&#10;            }&#10;&#10;        }&#10;        s3=s3+&quot;  &quot;;&#10;        if(val1&lt;0)&#10;        {&#10;            flag=0;&#10;        }&#10;        sn=val1+&quot;&quot;;&#10;&#10;        String nt=&quot;&quot;;&#10;        for(int h=0;h&lt;move;h++)&#10;        {&#10;            nt=nt+&quot;0&quot;;&#10;        }&#10;        SpannableString ss8 = new SpannableString(nt);&#10;        ss8.setSpan(new ForegroundColorSpan(Color.WHITE), 0, ss8.length(), 0);&#10;        kt.append(ss8);&#10;&#10;        if(flag==1) {&#10;            SpannableString ss2 = new SpannableString(s3);&#10;            ss2.setSpan(new UnderlineSpan(), 0, ss2.length(), 0);&#10;            ss2.setSpan(new ForegroundColorSpan(Color.BLUE), 0, ss2.length(), 0);&#10;            kt.append(ss2);&#10;        }&#10;&#10;        if(flag==0)&#10;        {&#10;&#10;                s3=&quot;______&quot;;&#10;            SpannableString ss2 = new SpannableString(s3);&#10;            ss2.setSpan(new ForegroundColorSpan(Color.BLUE), 0, ss2.length(), 0);&#10;            kt.append(ss2);&#10;        }&#10;        kt.append(&quot;\n&quot;);&#10;&#10;&#10;        String knt=&quot;&quot;;&#10;        for(int h=0;h&lt;move;h++)&#10;        {&#10;            knt=knt+&quot;0&quot;;&#10;        }&#10;        SpannableString ss9 = new SpannableString(knt);&#10;        ss9.setSpan(new ForegroundColorSpan(Color.WHITE), 0, ss9.length(), 0);&#10;        kt.append(ss9);&#10;        int we=sn.length();&#10;&#10;&#10;        if(we&lt;dn.length())&#10;        {&#10;            for(int i=0;i&lt;(dn.length()-we);i++)&#10;            {&#10;                sn=&quot;0&quot;+sn;&#10;                move++;&#10;            }&#10;        }&#10;&#10;//        SpannableString ss1=new SpannableString(sn);&#10;//        ss1.setSpan(new ForegroundColorSpan(Color.BLUE),0,ss1.length(),0);&#10;        kt.append(sn);&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.infovsn.homework;&#10;&#10;import android.graphics.Color;&#10;import android.os.Bundle;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import android.text.SpannableString;&#10;import android.text.method.ScrollingMovementMethod;&#10;import android.text.style.ForegroundColorSpan;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;import android.graphics.Canvas;&#10;import android.graphics.Paint;&#10;&#10;import com.google.android.gms.ads.AdRequest;&#10;import com.google.android.gms.ads.AdView;&#10;&#10;public class Division extends AppCompatActivity {&#10;    private AdView mAdView;&#10;    Button b1,b2,b3,b4,b5,b6,b7,b8,b9,b0,badd,bclr,back;&#10;    TextView et;&#10;    ImageButton bsp, beq;&#10;    TextView at,kt,qt;&#10;    long val1=0,val2=0;&#10;    int move=0;&#10;    boolean add;&#10;    boolean pms=false;&#10;    boolean down=false;&#10;    int move2=0;&#10;    String ipl=&quot;&quot;;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_division);&#10;        FontUtils.applyToActivity(this);&#10;&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;&#10;&#10;        b1=(Button) findViewById(R.id.one);&#10;        b2=(Button) findViewById(R.id.two);&#10;        b3=(Button) findViewById(R.id.three);&#10;        b4=(Button) findViewById(R.id.four);&#10;        b5=(Button) findViewById(R.id.five);&#10;        b6=(Button) findViewById(R.id.six);&#10;        b7=(Button) findViewById(R.id.seven);&#10;        b8=(Button) findViewById(R.id.eight);&#10;        b9=(Button) findViewById(R.id.nine);&#10;        b0=(Button) findViewById(R.id.zero);&#10;        badd=(Button) findViewById(R.id.add);&#10;        bsp=(ImageButton) findViewById(R.id.backspace);&#10;        bclr=(Button) findViewById(R.id.clear);&#10;        beq=(ImageButton) findViewById(R.id.equal);&#10;        et=(TextView) findViewById(R.id.txtScreen);&#10;        et.setMovementMethod(new ScrollingMovementMethod());&#10;        b1.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;1&quot;);&#10;            }&#10;        });&#10;        b2.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;2&quot;);&#10;            }&#10;        });&#10;        b3.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;3&quot;);&#10;            }&#10;        });&#10;        b4.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;4&quot;);&#10;            }&#10;        });&#10;        b5.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;5&quot;);&#10;            }&#10;        });&#10;        b6.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;6&quot;);&#10;            }&#10;        });&#10;        b7.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;7&quot;);&#10;            }&#10;        });&#10;        b8.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;8&quot;);&#10;            }&#10;        });&#10;        b9.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;9&quot;);&#10;            }&#10;        });&#10;        b0.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // TODO Auto-generated method stub&#10;                et.setText(et.getText()+&quot;0&quot;);&#10;            }&#10;        });&#10;&#10;&#10;        badd.setOnClickListener(new View.OnClickListener() {&#10;&#10;            @Override&#10;            public void onClick(View v) {&#10;//                val1=Integer.parseInt(et.getText()+&quot;&quot;);&#10;                String mm=et.getText().toString();&#10;                if(!mm.contains(&quot;\u00F7&quot;)) {&#10;                    et.setText(et.getText()+&quot;\n&quot;+&quot;\u00F7&quot;+&quot; &quot;);&#10;                }&#10;            }&#10;        });&#10;&#10;        bclr.setOnClickListener(new View.OnClickListener() {&#10;&#10;            @Override&#10;            public void onClick(View v) {&#10;//                val1=Integer.parseInt(et.getText()+&quot;&quot;);&#10;//                add=true;&#10;                et.setText(null);&#10;            }&#10;        });&#10;&#10;        bsp.setOnClickListener(new View.OnClickListener() {&#10;&#10;            @Override&#10;            public void onClick(View v) {&#10;//                val1=Integer.parseInt(et.getText()+&quot;&quot;);&#10;//                add=true;&#10;                String smp = et.getText().toString();&#10;                if (smp.length() &gt; 1) {&#10;                    char qq2=smp.charAt(smp.length()-1);&#10;                    if(qq2==' ')&#10;                    {&#10;                        smp = smp.substring(0, smp.length() - 2);&#10;                    }&#10;                    else&#10;                        smp = smp.substring(0, smp.length() - 1);&#10;                    et.setText(smp);&#10;                    char qq=smp.charAt(smp.length()-1);&#10;                    if(qq=='\n')&#10;                    {&#10;                        smp = smp.substring(0, smp.length() - 1);&#10;                        et.setText(smp);&#10;                    }&#10;                } else if (smp.length() &lt;= 1) {&#10;                    et.setText(null);&#10;                }&#10;&#10;            }&#10;        });&#10;&#10;        beq.setOnClickListener(new View.OnClickListener() {&#10;&#10;            @Override&#10;            public void onClick(View v) {&#10;                setContentView(R.layout.division);&#10;                FontUtils.applyToActivity(Division.this);&#10;                at=(TextView) findViewById(R.id.txtScr);&#10;                at.setMovementMethod(new ScrollingMovementMethod());&#10;                kt=(TextView) findViewById(R.id.txtdiv);&#10;                kt.setMovementMethod(new ScrollingMovementMethod());&#10;                qt=(TextView) findViewById(R.id.quot);&#10;                qt.setMovementMethod(new ScrollingMovementMethod());&#10;&#10;                // Apply monospace only to divisor and quotient for consistent top-line spacing&#10;                at.setTypeface(FontUtils.getRobotoMono(Division.this));&#10;                qt.setTypeface(FontUtils.getRobotoMono(Division.this));&#10;&#10;                //ADDS BY GOOGLE&#10;                mAdView=(AdView)findViewById(R.id.adView);&#10;//                mAdView.setAdListener(new ToastAdListener(Division.this));&#10;                AdRequest adRequest =new AdRequest.Builder().build();&#10;                mAdView.loadAd(adRequest);&#10;&#10;                long v1=0,v2=1;&#10;                String txt = et.getText() + &quot;&quot;;&#10;                if(!txt.contains(&quot;\u00F7&quot;)) {&#10;                    txt=txt+&quot;\n&quot; + &quot;\u00F7 &quot;;&#10;                }&#10;&#10;                int tm=0;&#10;                String yn=&quot;&quot;;&#10;                String zn=&quot;&quot;;&#10;                String[] split = txt.split(&quot;\n&quot;);&#10;&#10;                for (int i = 0; i &lt; split.length; i++) {&#10;                    if (i == 0) {&#10;                        yn = split[i];&#10;&#10;                        if(yn.length()==0)&#10;                        {&#10;                            v1=0;&#10;                            yn=0+&quot;&quot;;&#10;                            tm++;&#10;                        }&#10;                        else {&#10;                            if(yn.length()&gt;10)&#10;                            {&#10;                                v1=0;&#10;                                tm=4;&#10;                            }&#10;                            else&#10;                                 v1 = Long.parseLong(yn);&#10;                        }&#10;                    }&#10;                    if (i &gt; 0) {&#10;                        zn = split[i].substring(2);&#10;&#10;                        if(zn.length()==0)&#10;                        {&#10;                            v2=1;&#10;                            zn=1+&quot;&quot;;&#10;                            tm=3;&#10;&#10;                            if(tm==1)&#10;                            {&#10;                                v1=0;&#10;                                v2=1;&#10;                                zn=1+&quot;&quot;;&#10;                            }&#10;                        }&#10;                        else&#10;                        {&#10;                            if((zn.length())&gt;4)&#10;                            {&#10;                                v2=1;&#10;                                zn=1+&quot;&quot;;&#10;                                tm=5;&#10;                            }&#10;                            else&#10;                                v2=Long.parseLong(zn);&#10;                        }&#10;&#10;                    }&#10;                }&#10;&#10;                if(v2==0)&#10;                {&#10;                    tm=6;&#10;                    v2=1;&#10;                }&#10;&#10;&#10;                at.setText(zn);&#10;                String pn=&quot;)&quot;;&#10;                SpannableString ssp1=new SpannableString(pn);&#10;//                ssp1.setSpan(new RelativeSizeSpan(1.1f),0,1,0);&#10;                ssp1.setSpan(new ForegroundColorSpan(Color.RED),0,ssp1.length(),0);&#10;                at.append(ssp1);&#10;                long v3=v1/v2;&#10;                String qu=v3+&quot;&quot;;&#10;&#10;                // Build fractional quotient (decimal expansion) with limits:&#10;                // - fractional part: up to 5 digits&#10;                // - total digits (integer + fractional): up to 10 digits&#10;                long rem = v1 % v2;&#10;                StringBuilder displayQuot = new StringBuilder(qu);&#10;                StringBuilder quotientDigits = new StringBuilder(qu); // digits only for step logic&#10;                int decCount = 0;&#10;                int intPartLen = qu.length();&#10;&#10;                if (intPartLen &gt;= 10) {&#10;                    // Cap quotient to 10 integer digits, no decimals&#10;                    String capped = qu.substring(0, 10);&#10;                    displayQuot = new StringBuilder(capped);&#10;                    quotientDigits = new StringBuilder(capped);&#10;                    decCount = 0;&#10;                } else {&#10;                    int allowedDec = Math.min(5, 10 - intPartLen);&#10;                    if(rem != 0 &amp;&amp; allowedDec &gt; 0) {&#10;                        displayQuot.append('.');&#10;                        while(rem != 0 &amp;&amp; decCount &lt; allowedDec) {&#10;                            rem *= 10;&#10;                            long d = rem / v2;&#10;                            quotientDigits.append(d);&#10;                            displayQuot.append(d);&#10;                            rem = rem % v2;&#10;                            decCount++;&#10;                        }&#10;                    }&#10;                }&#10;&#10;                qt.setText(displayQuot.toString());&#10;                kt.setText(yn);&#10;                kt.append(&quot;\n&quot;);&#10;                String quotient=&quot;&quot;;&#10;                String remender=&quot;&quot;;&#10;                // Use full digits (integer + decimal) for step logic&#10;                quotient=quotientDigits.toString();&#10;                long v4=0;&#10;                String divv=&quot;&quot;;&#10;                String cur=&quot;&quot;;&#10;                long just1=0,just2=0;&#10;                int j=0,k=0;&#10;&#10;                // Prepare extended dividend with borrowed zeros for decimal part&#10;                StringBuilder zerosForYn = new StringBuilder();&#10;                for(int z=0; z&lt;decCount; z++) zerosForYn.append('0');&#10;                String ynExt = yn + zerosForYn.toString();&#10;&#10;                for(int i=0;i&lt;quotient.length();i++)&#10;                {&#10;&#10;                    // Keep old special-case breaks only for pure integer divisions&#10;                    if(i==0 &amp;&amp; decCount==0)&#10;                    {&#10;                        if((quotient.length()==2)&amp;&amp;(quotient.charAt(1)=='0'))&#10;                        {&#10;                            v4=v3*v2;&#10;                            remender=v4+&quot;\n&quot;;&#10;                            kt.append(remender);&#10;                            divv=v1+&quot;&quot;;&#10;                            divv=divv+&quot;\n&quot;+v4;&#10;                            divisioned(divv);&#10;                            pms=true;&#10;                            break;&#10;                        }&#10;                        else&#10;                        {&#10;                            if(quotient.charAt(0)=='0')&#10;                            {&#10;                                v4=v3*v2;&#10;                                remender=v4+&quot;\n&quot;;&#10;                                String mt=&quot;&quot;;&#10;                                if(yn.length()&gt;remender.length())&#10;                                {&#10;                                        for(int x=0;x&lt;((yn.length()-1));x++)&#10;                                        {&#10;                                           mt=mt+&quot;0&quot;;&#10;                                        }&#10;&#10;                                }&#10;                                if(yn.length()==2)&#10;                                    mt=&quot;0&quot;;&#10;                                SpannableString ss6 = new SpannableString(mt);&#10;                                ss6.setSpan(new ForegroundColorSpan(Color.WHITE), 0, ss6.length(), 0);&#10;                                kt.append(ss6);&#10;                                kt.append(remender);&#10;                                divv=v1+&quot;&quot;;&#10;                                divv=divv+&quot;\n&quot;+v4;&#10;                                divisioned(divv);&#10;                                pms=true;&#10;                                break;&#10;                            }&#10;                        }&#10;                    }&#10;                    if(val1!=0)&#10;                         cur=val1+&quot;&quot;;&#10;                    else&#10;                    {&#10;                        if((i!=0)&amp;&amp;(v4!=0))&#10;                            move++;&#10;                    }&#10;&#10;                    String tmt=&quot;&quot;;&#10;                    String t=&quot;&quot;;&#10;                    t=quotient.charAt(i)+&quot;&quot;;&#10;                    just1=Long.parseLong(t);&#10;                    v4=just1*v2;&#10;                    if(v4!=0)&#10;                    {&#10;                        String df=v4+&quot;&quot;;&#10;                        for(int g=j;g&lt;ynExt.length();g++)&#10;                        {&#10;                            if(df.length()&gt;cur.length())&#10;                            {&#10;                                k++;&#10;                                cur=cur+ynExt.substring(j,k);&#10;                                tmt=tmt+ynExt.substring(j,k);&#10;                                j++;&#10;                            }&#10;                            else&#10;                            {&#10;                                just2=Long.parseLong(cur);&#10;                                if(v4&gt;just2)&#10;                                {&#10;                                    k++;&#10;                                    cur=cur+ynExt.substring(j,k);&#10;                                    tmt=tmt+ynExt.substring(j,k);&#10;                                    j++;&#10;                                    move2++;&#10;                                    down=true;&#10;                                }&#10;                            }&#10;&#10;                        }&#10;                        if(i!=0)&#10;                        {&#10;                            kt.append(tmt);&#10;                        }&#10;                        String nt=&quot;&quot;;&#10;                        remender=v4+&quot;\n&quot;;&#10;&#10;                        if(i!=0)&#10;                            kt.append(&quot;\n&quot;);&#10;                        for(int h=0;h&lt;move;h++)&#10;                        {&#10;                            nt=nt+&quot;0&quot;;&#10;&#10;                        }&#10;                        if(down)&#10;                        {&#10;                            for(int h=0;h&lt;move2;h++)&#10;                            {&#10;                                nt=nt+&quot;0&quot;;&#10;                            }&#10;                            down=false;&#10;                            move2=0;&#10;                        }&#10;                        SpannableString ss7 = new SpannableString(nt);&#10;                        ss7.setSpan(new ForegroundColorSpan(Color.WHITE), 0, ss7.length(), 0);&#10;                        kt.append(ss7);&#10;                        kt.append(remender);&#10;                        divv=cur;&#10;                        divv=divv+&quot;\n&quot;+v4;&#10;                        divisioned(divv);&#10;                        j=k;&#10;                        cur=&quot;&quot;;&#10;                    }&#10;&#10;                }&#10;&#10;                // If we produced decimal digits, skip the legacy trailing-digits append logic&#10;                if(decCount&gt;0) {&#10;                    pms = true;&#10;                }&#10;&#10;                if(!pms)&#10;                {&#10;                    String mane=&quot;&quot;;&#10;                    long meto=0;&#10;                   long abc=v3*v2;&#10;                    abc=v1-abc;&#10;&#10;                    if(k&lt;quotient.length())&#10;                    {&#10;                        mane=yn.substring(k,yn.length());&#10;                        meto=Long.parseLong(mane);&#10;                    }&#10;                    if(meto==abc)&#10;                    {&#10;                        kt.append(mane);&#10;                    }&#10;                   else if(abc&gt;val1)&#10;                    {&#10;                        String ipl2=abc+&quot;&quot;;&#10;                        int lle=ipl2.length();&#10;                        ipl=val1+&quot;&quot;;&#10;                        int lle2=ipl.length();&#10;                        for(int z=0;z&lt;lle-lle2;z++)&#10;                        {&#10;                            ipl=ipl+&quot;0&quot;;&#10;                        }&#10;                        val1=Long.parseLong(ipl);&#10;                        abc=abc-val1;&#10;                        ipl2=abc+&quot;&quot;;&#10;                        kt.append(ipl2);&#10;                    }&#10;&#10;&#10;                }&#10;&#10;                if(tm==1)&#10;                {&#10;                    qt.setText(&quot;0&quot;);&#10;                    kt.setText(&quot;0&quot;);&#10;                }&#10;                if(tm==3)&#10;                {&#10;                    at.setText(&quot;)&quot;);&#10;                    qt.setText(yn);&#10;                    kt.setText(yn);&#10;                }&#10;                if(tm==4)&#10;                {&#10;                    at.setText(null);&#10;                    qt.setText(null);&#10;                    kt.setText(&quot;Dividend exceeds maximum digits(10)&quot;);&#10;                }&#10;                if(tm==5)&#10;                {&#10;                    at.setText(null);&#10;                    qt.setText(null);&#10;                    kt.setText(&quot;Divisor exceeds maximum digits(4)&quot;);&#10;                }&#10;                if(tm==6)&#10;                {&#10;                    at.setText(&quot;0)&quot;);&#10;                    qt.setText(&quot;infinity&quot;);&#10;                    kt.setText(yn);&#10;                }&#10;                at.append(&quot;\n\n&quot;);&#10;//             sn=sn+ss1+&quot;\n&quot;+val1;&#10;//                et.setText(sn);&#10;&#10;            }&#10;        });&#10;    }&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        switch (item.getItemId()) {&#10;            case android.R.id.home:&#10;                // app icon in action bar clicked; goto parent activity.&#10;                this.finish();&#10;                return true;&#10;            default:&#10;                return super.onOptionsItemSelected(item);&#10;        }&#10;    }&#10;&#10;&#10;    // Draws a continuous solid line across a given number of monospace cells&#10;    static class SolidUnderlineSpan extends android.text.style.ReplacementSpan {&#10;        private final int cells;&#10;        private final int color;&#10;        SolidUnderlineSpan(int cells, int color) {&#10;            this.cells = Math.max(1, cells);&#10;            this.color = color;&#10;        }&#10;        @Override public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {&#10;            if (fm != null) {&#10;                Paint.FontMetricsInt pfm = paint.getFontMetricsInt();&#10;                fm.ascent = pfm.ascent; fm.descent = pfm.descent; fm.top = pfm.top; fm.bottom = pfm.bottom;&#10;            }&#10;            float w = paint.measureText(&quot;0&quot;);&#10;            return (int) Math.ceil(w * cells);&#10;        }&#10;        @Override public void draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint) {&#10;            int oldColor = paint.getColor();&#10;            float oldStroke = paint.getStrokeWidth();&#10;            float cellW = paint.measureText(&quot;0&quot;);&#10;            float width = cellW * cells;&#10;            // Position just below baseline similar to UnderlineSpan&#10;            float offset = Math.max(1f, paint.getTextSize() / 18f);&#10;            float lineY = y + offset;&#10;            paint.setColor(color);&#10;            paint.setStrokeWidth(Math.max(2f, oldStroke));&#10;            canvas.drawLine(x, lineY, x + width, lineY, paint);&#10;            paint.setStrokeWidth(oldStroke);&#10;            paint.setColor(oldColor);&#10;        }&#10;    }&#10;&#10;    public void divisioned(String sample)&#10;    {&#10;        String txt=sample;&#10;        String[] split=txt.split(&quot;\n&quot;);&#10;        String fn=&quot;&quot;;&#10;        String sn=&quot;&quot;;&#10;        String dn=&quot;&quot;;&#10;        long m=0,n=0;&#10;        long rem_m,rem_n,sum=0;&#10;        int c1=0,c2=0,c3=0,c4=0,c5=0,c6=0,c7=0,c8=0,c9=0,l=0;&#10;        for(int i=0;i&lt;split.length;i++)&#10;        {&#10;            int round=1;&#10;            if(i==0) {&#10;                fn = split[i];&#10;                dn=fn;&#10;                l = fn.length();&#10;            }&#10;            if(i&gt;0) {&#10;                fn = split[i];&#10;                if(l&lt;fn.length())&#10;                {&#10;                    l=fn.length();&#10;                }&#10;                if(fn.length()==0)&#10;                {&#10;                    fn=0+&quot;&quot;;&#10;                }&#10;            }&#10;            val2=Long.parseLong(fn);&#10;            n=val2;&#10;            while(m!=0 &amp;&amp; n!=0)&#10;            {&#10;                rem_m=m%10;&#10;                rem_n=n%10;&#10;&#10;                if(round==1)&#10;                {&#10;                    sum=rem_m-rem_n;&#10;                    if(sum&lt;0)&#10;                        c1++;&#10;                }&#10;                if(round==2)&#10;                {&#10;                    sum=rem_m-rem_n-c1;&#10;                    if(sum&lt;0)&#10;                        c2++;&#10;                }&#10;                if(round==3)&#10;                {&#10;                    sum=rem_m-rem_n-c2;&#10;                    if(sum&lt;0)&#10;                        c3++;&#10;                }&#10;                if(round==4)&#10;                {&#10;                    sum=rem_m-rem_n-c3;&#10;                    if(sum&lt;0)&#10;                        c4++;&#10;                }&#10;                if(round==5)&#10;                {&#10;                    sum=rem_m-rem_n-c4;&#10;                    if(sum&lt;0)&#10;                        c5++;&#10;                }&#10;                if(round==6)&#10;                {&#10;                    sum=rem_m-rem_n-c5;&#10;                    if(sum&lt;0)&#10;                        c6++;&#10;                }&#10;                if(round==7)&#10;                {&#10;                    sum=rem_m-rem_n-c6;&#10;                    if(sum&lt;0)&#10;                        c7++;&#10;                }&#10;                if(round==8)&#10;                {&#10;                    sum=rem_m-rem_n-c7;&#10;                    if(sum&lt;0)&#10;                        c8++;&#10;                }&#10;                if(round==9)&#10;                {&#10;                    sum=rem_m-rem_n-c8;&#10;                    if(sum&lt;0)&#10;                        c9++;&#10;                }&#10;&#10;&#10;                m=m/10;&#10;                n=n/10;&#10;                round++;&#10;            }&#10;            if(i==0)&#10;                val1=val2;&#10;            else&#10;                val1=val1-val2;&#10;            m=val1;&#10;        }&#10;&#10;&#10;//              val2 = Integer.parseInt(et.getText() + &quot;&quot;);&#10;//                if (add == true)&#10;//                    et.setText(null);&#10;//                    et.setText(val1 + val2 + &quot;&quot;);&#10;//                    add = false;&#10;//                }&#10;&#10;//        sn=sn+et.getText()+&quot;\n&quot;;&#10;//        kt.setText(sn);&#10;        String s3=&quot;&quot;;&#10;        int flag=0;&#10;//        int gr=8;&#10;//        if(l&gt;gr)&#10;//        {&#10;//            gr=l-1;&#10;//        }&#10;&#10;        for(int i=l-1;i&gt;0;i--)&#10;        {&#10;&#10;&#10;            if(i==9)&#10;            {&#10;                if((c9&gt;0)) {&#10;                    s3 = s3 + c9 + &quot;&quot;;&#10;                    flag=1;&#10;                }&#10;                else&#10;                    s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==8)&#10;            {&#10;                if((c8&gt;0)) {&#10;                    s3 = s3 + c8 + &quot;&quot;;&#10;                    flag=1;&#10;                }&#10;                else&#10;                    s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==7)&#10;            {if((c7&gt;0))&#10;            {&#10;                s3=s3+c7+&quot;&quot;;&#10;                flag=1;}&#10;            else&#10;                s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==6)&#10;            {if((c6&gt;0)) {&#10;                s3 = s3 + c6 + &quot;&quot;;&#10;                flag = 1;&#10;            }&#10;            else&#10;                s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==5)&#10;            {if((c5&gt;0)) {&#10;                s3 = s3 + c5 + &quot;&quot;;&#10;                flag = 1;&#10;            }&#10;            else&#10;                s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==4)&#10;            {if((c4&gt;0)) {&#10;                s3 = s3 + c4 + &quot;&quot;;&#10;                flag = 1;&#10;            }&#10;            else&#10;                s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==3)&#10;            {&#10;                if((c3&gt;0)) {&#10;                    s3 = s3 + c3 + &quot;&quot;;&#10;                    flag = 1;&#10;                }&#10;                else&#10;                    s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==2)&#10;            {if((c2&gt;0))&#10;            {&#10;                s3=s3+c2+&quot;&quot;;&#10;                flag=1;}&#10;            else&#10;                s3=s3+&quot;  &quot;;&#10;            }&#10;            if(i==1)&#10;            {if((c1&gt;0)) {&#10;                s3 = s3 + c1 + &quot;&quot;;&#10;                flag = 1;&#10;            }&#10;            else&#10;                s3=s3+&quot;  &quot;;&#10;            }&#10;&#10;        }&#10;        s3=s3+&quot;  &quot;;&#10;        if(val1&lt;0)&#10;        {&#10;            flag=0;&#10;        }&#10;        sn=val1+&quot;&quot;;&#10;&#10;        String nt=&quot;&quot;;&#10;        for(int h=0;h&lt;move;h++)&#10;        {&#10;            nt=nt+&quot;0&quot;;&#10;        }&#10;        SpannableString ss8 = new SpannableString(nt);&#10;        ss8.setSpan(new ForegroundColorSpan(Color.WHITE), 0, ss8.length(), 0);&#10;        kt.append(ss8);&#10;&#10;        if(flag==1) {&#10;            // Draw continuous solid blue line across the width represented by s3&#10;            SpannableString lineSpan = new SpannableString(&quot; &quot;);&#10;            lineSpan.setSpan(new SolidUnderlineSpan(s3.length(), Color.BLUE), 0, 1, 0);&#10;            kt.append(lineSpan);&#10;        }&#10;&#10;        if(flag==0)&#10;        {&#10;            // Use dynamic width (min 6) for negative/empty borrow line as well&#10;            int w = Math.max(6, s3.length());&#10;            SpannableString lineSpan = new SpannableString(&quot; &quot;);&#10;            lineSpan.setSpan(new SolidUnderlineSpan(w, Color.BLUE), 0, 1, 0);&#10;            kt.append(lineSpan);&#10;        }&#10;        kt.append(&quot;\n&quot;);&#10;&#10;&#10;        String knt=&quot;&quot;;&#10;        for(int h=0;h&lt;move;h++)&#10;        {&#10;            knt=knt+&quot;0&quot;;&#10;        }&#10;        SpannableString ss9 = new SpannableString(knt);&#10;        ss9.setSpan(new ForegroundColorSpan(Color.WHITE), 0, ss9.length(), 0);&#10;        kt.append(ss9);&#10;        int we=sn.length();&#10;&#10;&#10;        if(we&lt;dn.length())&#10;        {&#10;            for(int i=0;i&lt;(dn.length()-we);i++)&#10;            {&#10;                sn=&quot;0&quot;+sn;&#10;                move++;&#10;            }&#10;        }&#10;&#10;//        SpannableString ss1=new SpannableString(sn);&#10;//        ss1.setSpan(new ForegroundColorSpan(Color.BLUE),0,ss1.length(),0);&#10;        kt.append(sn);&#10;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>