<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/infovsn/homework/Lcm.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/infovsn/homework/Lcm.java" />
              <option name="originalContent" value="package com.infovsn.homework;&#10;&#10;import android.graphics.Color;&#10;import android.os.Bundle;&#10;import androidx.appcompat.app.ActionBar;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import android.text.SpannableString;&#10;import android.text.method.ScrollingMovementMethod;&#10;import android.text.style.ForegroundColorSpan;&#10;import android.text.style.RelativeSizeSpan;&#10;import android.view.MenuItem;&#10;import android.widget.Button;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;&#10;import com.google.android.gms.ads.AdRequest;&#10;import com.google.android.gms.ads.AdView;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class Lcm extends AppCompatActivity {&#10;    private AdView mAdView;&#10;    Button b1,b2,b3,b4,b5,b6,b7,b8,b9,b0,bclr; // numeric + clear&#10;    TextView et;&#10;    ImageButton bsp,badd,beq;&#10;    TextView at;&#10;&#10;    private static final int MAX_DIGITS = 15;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_lcm);&#10;        FontUtils.applyToActivity(this);&#10;        ActionBar ab = getSupportActionBar();&#10;        if (ab != null) ab.setDisplayHomeAsUpEnabled(true);&#10;&#10;        // find views (no casts needed with API 26+ compile + androidx)&#10;        b1 = findViewById(R.id.one);&#10;        b2 = findViewById(R.id.two);&#10;        b3 = findViewById(R.id.three);&#10;        b4 = findViewById(R.id.four);&#10;        b5 = findViewById(R.id.five);&#10;        b6 = findViewById(R.id.six);&#10;        b7 = findViewById(R.id.seven);&#10;        b8 = findViewById(R.id.eight);&#10;        b9 = findViewById(R.id.nine);&#10;        b0 = findViewById(R.id.zero);&#10;        badd = findViewById(R.id.add);&#10;        bsp = findViewById(R.id.backspace);&#10;        bclr = findViewById(R.id.clear);&#10;        beq = findViewById(R.id.equal);&#10;        et = findViewById(R.id.txtScreen);&#10;        et.setMovementMethod(new ScrollingMovementMethod());&#10;&#10;        // Digit listeners (explicit for readability)&#10;        b1.setOnClickListener(v -&gt; appendDigit(&quot;1&quot;));&#10;        b2.setOnClickListener(v -&gt; appendDigit(&quot;2&quot;));&#10;        b3.setOnClickListener(v -&gt; appendDigit(&quot;3&quot;));&#10;        b4.setOnClickListener(v -&gt; appendDigit(&quot;4&quot;));&#10;        b5.setOnClickListener(v -&gt; appendDigit(&quot;5&quot;));&#10;        b6.setOnClickListener(v -&gt; appendDigit(&quot;6&quot;));&#10;        b7.setOnClickListener(v -&gt; appendDigit(&quot;7&quot;));&#10;        b8.setOnClickListener(v -&gt; appendDigit(&quot;8&quot;));&#10;        b9.setOnClickListener(v -&gt; appendDigit(&quot;9&quot;));&#10;        b0.setOnClickListener(v -&gt; appendDigit(&quot;0&quot;));&#10;&#10;        badd.setOnClickListener(v -&gt; et.append(&quot;\n&quot;));&#10;        bclr.setOnClickListener(v -&gt; et.setText(&quot;&quot;));&#10;&#10;        bsp.setOnClickListener(v -&gt; {&#10;            String smp = et.getText().toString();&#10;            if (smp.isEmpty()) return;&#10;            smp = smp.substring(0, smp.length()-1); // remove last char&#10;            while (smp.endsWith(&quot;\n\n&quot;)) { // collapse extra trailing newlines&#10;                smp = smp.substring(0, smp.length()-1);&#10;            }&#10;            et.setText(smp);&#10;        });&#10;&#10;        beq.setOnClickListener(v -&gt; {&#10;            // Capture input BEFORE switching layout&#10;            String raw = et.getText().toString();&#10;&#10;            setContentView(R.layout.added);&#10;            at = findViewById(R.id.txtScr);&#10;            at.setMovementMethod(new ScrollingMovementMethod());&#10;            mAdView = findViewById(R.id.adView);&#10;            AdRequest adRequest = new AdRequest.Builder().build();&#10;            mAdView.loadAd(adRequest);&#10;&#10;            String[] lines = raw.split(&quot;\n&quot;);&#10;            List&lt;Long&gt; nums = new ArrayList&lt;&gt;();&#10;            boolean error = false;&#10;            StringBuilder echo = new StringBuilder();&#10;&#10;            for (String line : lines) {&#10;                String trimmed = line.trim();&#10;                if (trimmed.isEmpty()) continue; // skip blanks&#10;                if (trimmed.length() &gt; MAX_DIGITS) {&#10;                    at.setText(getString(R.string.error_max_digits, MAX_DIGITS));&#10;                    at.append(&quot;\n&quot;);&#10;                    error = true;&#10;                    break;&#10;                }&#10;                try {&#10;                    long value = Long.parseLong(trimmed);&#10;                    nums.add(value);&#10;                    echo.append(value).append('\n');&#10;                } catch (NumberFormatException nfe) {&#10;                    at.setText(getString(R.string.error_invalid_number, trimmed));&#10;                    at.append(&quot;\n&quot;);&#10;                    error = true;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (!error) {&#10;                if (nums.isEmpty()) {&#10;                    at.setText(getString(R.string.error_enter_numbers_first));&#10;                    at.append(&quot;\n\n&quot;);&#10;                    return;&#10;                }&#10;                long result = lcmSafe(nums);&#10;                at.setText(echo.toString());&#10;                if (result == -1L) {&#10;                    at.append(getString(R.string.error_overflow));&#10;                    at.append(&quot;\n\n&quot;);&#10;                    return;&#10;                }&#10;                SpannableString ss1 = new SpannableString(&quot;\n&quot; + getString(R.string.label_lcm, String.valueOf(result)));&#10;                ss1.setSpan(new RelativeSizeSpan(1.2f), 0, ss1.length(), 0);&#10;                ss1.setSpan(new ForegroundColorSpan(Color.RED), 0, ss1.length(), 0);&#10;                at.append(ss1);&#10;                at.append(&quot;\n\n&quot;);&#10;            } else {&#10;                at.append(&quot;\n&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void appendDigit(String d) { et.append(d); }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    // --- Math helpers ---&#10;    private static long gcd(long a, long b) {&#10;        while (b != 0) {&#10;            long t = b;&#10;            b = a % b;&#10;            a = t;&#10;        }&#10;        return Math.abs(a);&#10;    }&#10;&#10;    private static long lcmPair(long a, long b) {&#10;        if (a == 0 || b == 0) return 0;&#10;        long g = gcd(a, b);&#10;        return Math.abs(a / g * b);&#10;    }&#10;&#10;    @SuppressWarnings(&quot;unused&quot;)&#10;    private static long lcmArray(List&lt;Long&gt; nums) { // retained if future reuse needed&#10;        long result = nums.get(0);&#10;        for (int i = 1; i &lt; nums.size(); i++) {&#10;            result = lcmPair(result, nums.get(i));&#10;        }&#10;        return result;&#10;    }&#10;&#10;    private static long lcmSafe(List&lt;Long&gt; nums) {&#10;        long result = nums.get(0);&#10;        for (int i = 1; i &lt; nums.size(); i++) {&#10;            long a = result;&#10;            long b = nums.get(i);&#10;            if (a == 0 || b == 0) { result = 0; continue; }&#10;            long g = gcd(a, b);&#10;            long divided = a / g;&#10;            if (divided != 0 &amp;&amp; divided &gt; Long.MAX_VALUE / Math.abs(b)) {&#10;                return -1L; // overflow&#10;            }&#10;            result = Math.abs(divided * b);&#10;        }&#10;        return result;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.infovsn.homework;&#10;&#10;import android.graphics.Color;&#10;import android.os.Bundle;&#10;import androidx.appcompat.app.ActionBar;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import android.text.SpannableString;&#10;import android.text.method.ScrollingMovementMethod;&#10;import android.text.style.ForegroundColorSpan;&#10;import android.text.style.RelativeSizeSpan;&#10;import android.view.MenuItem;&#10;import android.widget.Button;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;&#10;import com.google.android.gms.ads.AdRequest;&#10;import com.google.android.gms.ads.AdView;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class Lcm extends AppCompatActivity {&#10;    private AdView mAdView;&#10;    Button b1,b2,b3,b4,b5,b6,b7,b8,b9,b0,bclr; // numeric + clear&#10;    TextView et;&#10;    ImageButton bsp,badd,beq;&#10;    // Remove numbers/primes TextViews; use custom table view instead&#10;    LcmTableView lcmTable;&#10;    TextView headingTv, answerTv; // new heading and answer (green)&#10;&#10;    private static final int MAX_DIGITS = 15;&#10;    private static final int MAX_STEPS = 2000; // guard to avoid pathological loops&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_lcm);&#10;        FontUtils.applyToActivity(this);&#10;        ActionBar ab = getSupportActionBar();&#10;        if (ab != null) ab.setDisplayHomeAsUpEnabled(true);&#10;&#10;        // find views (no casts needed with API 26+ compile + androidx)&#10;        b1 = findViewById(R.id.one);&#10;        b2 = findViewById(R.id.two);&#10;        b3 = findViewById(R.id.three);&#10;        b4 = findViewById(R.id.four);&#10;        b5 = findViewById(R.id.five);&#10;        b6 = findViewById(R.id.six);&#10;        b7 = findViewById(R.id.seven);&#10;        b8 = findViewById(R.id.eight);&#10;        b9 = findViewById(R.id.nine);&#10;        b0 = findViewById(R.id.zero);&#10;        badd = findViewById(R.id.add);&#10;        bsp = findViewById(R.id.backspace);&#10;        bclr = findViewById(R.id.clear);&#10;        beq = findViewById(R.id.equal);&#10;        et = findViewById(R.id.txtScreen);&#10;        et.setMovementMethod(new ScrollingMovementMethod());&#10;&#10;        // Digit listeners (explicit for readability)&#10;        b1.setOnClickListener(v -&gt; appendDigit(&quot;1&quot;));&#10;        b2.setOnClickListener(v -&gt; appendDigit(&quot;2&quot;));&#10;        b3.setOnClickListener(v -&gt; appendDigit(&quot;3&quot;));&#10;        b4.setOnClickListener(v -&gt; appendDigit(&quot;4&quot;));&#10;        b5.setOnClickListener(v -&gt; appendDigit(&quot;5&quot;));&#10;        b6.setOnClickListener(v -&gt; appendDigit(&quot;6&quot;));&#10;        b7.setOnClickListener(v -&gt; appendDigit(&quot;7&quot;));&#10;        b8.setOnClickListener(v -&gt; appendDigit(&quot;8&quot;));&#10;        b9.setOnClickListener(v -&gt; appendDigit(&quot;9&quot;));&#10;        b0.setOnClickListener(v -&gt; appendDigit(&quot;0&quot;));&#10;&#10;        badd.setOnClickListener(v -&gt; et.append(&quot;\n&quot;));&#10;        bclr.setOnClickListener(v -&gt; et.setText(&quot;&quot;));&#10;&#10;        bsp.setOnClickListener(v -&gt; {&#10;            String smp = et.getText().toString();&#10;            if (smp.isEmpty()) return;&#10;            smp = smp.substring(0, smp.length()-1); // remove last char&#10;            while (smp.endsWith(&quot;\n\n&quot;)) { // collapse extra trailing newlines&#10;                smp = smp.substring(0, smp.length()-1);&#10;            }&#10;            et.setText(smp);&#10;        });&#10;&#10;        beq.setOnClickListener(v -&gt; {&#10;            // Capture input BEFORE switching layout&#10;            String raw = et.getText().toString();&#10;            String[] lines = raw.split(&quot;\n&quot;);&#10;            List&lt;Long&gt; nums = new ArrayList&lt;&gt;();&#10;&#10;            for (String line : lines) {&#10;                String trimmed = line.trim();&#10;                if (trimmed.isEmpty()) continue; // skip blanks&#10;                if (trimmed.length() &gt; MAX_DIGITS) {&#10;                    // Switch to simple result screen to show error clearly&#10;                    setContentView(R.layout.added);&#10;                    FontUtils.applyToActivity(Lcm.this);&#10;                    TextView at = findViewById(R.id.txtScr);&#10;                    at.setMovementMethod(new ScrollingMovementMethod());&#10;                    at.setText(getString(R.string.error_max_digits, MAX_DIGITS));&#10;                    at.append(&quot;\n\n&quot;);&#10;                    return;&#10;                }&#10;                try {&#10;                    long value = Long.parseLong(trimmed);&#10;                    nums.add(value);&#10;                } catch (NumberFormatException nfe) {&#10;                    setContentView(R.layout.added);&#10;                    FontUtils.applyToActivity(Lcm.this);&#10;                    TextView at = findViewById(R.id.txtScr);&#10;                    at.setMovementMethod(new ScrollingMovementMethod());&#10;                    at.setText(getString(R.string.error_invalid_number, trimmed));&#10;                    at.append(&quot;\n\n&quot;);&#10;                    return;&#10;                }&#10;            }&#10;&#10;            if (nums.isEmpty()) {&#10;                setContentView(R.layout.added);&#10;                FontUtils.applyToActivity(Lcm.this);&#10;                TextView at = findViewById(R.id.txtScr);&#10;                at.setMovementMethod(new ScrollingMovementMethod());&#10;                at.setText(getString(R.string.error_enter_numbers_first));&#10;                at.append(&quot;\n\n&quot;);&#10;                return;&#10;            }&#10;&#10;            // If any input is 0, LCM is 0 (show echo + result)&#10;            boolean anyZero = false;&#10;            for (Long n : nums) { if (n == 0L) { anyZero = true; break; } }&#10;            if (anyZero) {&#10;                setContentView(R.layout.added);&#10;                FontUtils.applyToActivity(Lcm.this);&#10;                TextView at = findViewById(R.id.txtScr);&#10;                at.setMovementMethod(new ScrollingMovementMethod());&#10;                StringBuilder echo = new StringBuilder();&#10;                for (Long n : nums) echo.append(n).append('\n');&#10;                at.setText(echo.toString());&#10;                SpannableString ss1 = new SpannableString(&quot;\n&quot; + getString(R.string.label_lcm, &quot;0&quot;));&#10;                ss1.setSpan(new RelativeSizeSpan(1.2f), 0, ss1.length(), 0);&#10;                ss1.setSpan(new ForegroundColorSpan(Color.GREEN), 0, ss1.length(), 0);&#10;                at.append(ss1);&#10;                at.append(&quot;\n\n&quot;);&#10;                return;&#10;            }&#10;&#10;            // Now show the division-method layout&#10;            setContentView(R.layout.lcm_division);&#10;            FontUtils.applyToActivity(Lcm.this);&#10;            lcmTable = findViewById(R.id.lcmTable);&#10;            headingTv = findViewById(R.id.txtHeading);&#10;            answerTv = findViewById(R.id.txtAnswer);&#10;&#10;            // Ads&#10;            mAdView = findViewById(R.id.adView);&#10;            if (mAdView != null) {&#10;                AdRequest adRequest = new AdRequest.Builder().build();&#10;                mAdView.loadAd(adRequest);&#10;            }&#10;&#10;            // Build heading like &quot;LCM of 6 and 8&quot; (or &quot;LCM of 2, 3 and 5&quot;)&#10;            headingTv.setText(getString(R.string.heading_lcm_of, humanJoin(nums)));&#10;&#10;            List&lt;Long&gt; work = new ArrayList&lt;&gt;(nums);&#10;&#10;            long lcm = 1L;&#10;            long prime = 2L;&#10;            int steps = 0;&#10;            boolean overflow = false;&#10;            List&lt;Long&gt; usedPrimes = new ArrayList&lt;&gt;();&#10;            List&lt;List&lt;Long&gt;&gt; tableRows = new ArrayList&lt;&gt;();&#10;            tableRows.add(new ArrayList&lt;&gt;(work)); // initial row&#10;&#10;            while (!allOnes(work) &amp;&amp; steps &lt; MAX_STEPS) {&#10;                boolean divisible = anyDivisible(work, prime);&#10;                if (!divisible) {&#10;                    prime = nextPrime(prime);&#10;                    continue;&#10;                }&#10;                for (int i = 0; i &lt; work.size(); i++) {&#10;                    long val = work.get(i);&#10;                    if (val % prime == 0) {&#10;                        work.set(i, val / prime);&#10;                    }&#10;                }&#10;                if (lcm != 0 &amp;&amp; lcm &gt; Long.MAX_VALUE / prime) {&#10;                    overflow = true; break;&#10;                }&#10;                lcm *= prime;&#10;                usedPrimes.add(prime);&#10;&#10;                tableRows.add(new ArrayList&lt;&gt;(work)); // append step row&#10;                steps++;&#10;            }&#10;&#10;            // Feed data to custom view (vertical line ends at last row)&#10;            lcmTable.setData(tableRows, usedPrimes);&#10;&#10;            // Bottom green sentence e.g. &quot;LCM = 2 × 2 × 2 × 3 = 24&quot;&#10;            if (overflow) {&#10;                answerTv.setText(getString(R.string.error_overflow));&#10;            } else {&#10;                String chain = buildChain(usedPrimes);&#10;                String ans = getString(R.string.label_lcm_chain, chain, String.valueOf(lcm));&#10;                answerTv.setText(ans);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void appendDigit(String d) { et.append(d); }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    // --- Math helpers ---&#10;    private static boolean allOnes(List&lt;Long&gt; arr) {&#10;        for (Long v : arr) if (v != 1L) return false; return true;&#10;    }&#10;    private static boolean anyDivisible(List&lt;Long&gt; arr, long p) {&#10;        for (Long v : arr) if (v % p == 0 &amp;&amp; v &gt; 1L) return true; return false;&#10;    }&#10;    private static String joinRow(List&lt;Long&gt; arr) {&#10;        StringBuilder sb = new StringBuilder();&#10;        for (int i = 0; i &lt; arr.size(); i++) {&#10;            if (i &gt; 0) sb.append(&quot;    &quot;); // spacing between columns&#10;            sb.append(arr.get(i));&#10;        }&#10;        return sb.toString();&#10;    }&#10;&#10;    private static String humanJoin(List&lt;Long&gt; nums) {&#10;        if (nums.isEmpty()) return &quot;&quot;;&#10;        if (nums.size() == 1) return String.valueOf(nums.get(0));&#10;        if (nums.size() == 2) return String.format(Locale.getDefault(), &quot;%d and %d&quot;, nums.get(0), nums.get(1));&#10;        StringBuilder sb = new StringBuilder();&#10;        for (int i = 0; i &lt; nums.size(); i++) {&#10;            if (i &gt; 0) {&#10;                if (i == nums.size() - 1) sb.append(&quot; and &quot;); else sb.append(&quot;, &quot;);&#10;            }&#10;            sb.append(nums.get(i));&#10;        }&#10;        return sb.toString();&#10;    }&#10;&#10;    private static String buildChain(List&lt;Long&gt; primes) {&#10;        if (primes.isEmpty()) return &quot;&quot;;&#10;        StringBuilder sb = new StringBuilder();&#10;        final String times = &quot; × &quot;;&#10;        for (int i = 0; i &lt; primes.size(); i++) {&#10;            if (i &gt; 0) sb.append(times);&#10;            sb.append(primes.get(i));&#10;        }&#10;        return sb.toString();&#10;    }&#10;&#10;    private static long nextPrime(long current) {&#10;        if (current &lt; 2) return 2;&#10;        long p = current + 1;&#10;        if ((p &amp; 1) == 0) p++;&#10;        while (!isPrime(p)) p += 2;&#10;        return p;&#10;    }&#10;    private static boolean isPrime(long n) {&#10;        if (n &lt; 2) return false;&#10;        if (n % 2 == 0) return n == 2;&#10;        for (long d = 3; d * d &lt;= n; d += 2) {&#10;            if (n % d == 0) return false;&#10;        }&#10;        return true;&#10;    }&#10;&#10;    // Retained efficient direct LCM if needed elsewhere&#10;    private static long gcd(long a, long b) {&#10;        while (b != 0) {&#10;            long t = b;&#10;            b = a % b;&#10;            a = t;&#10;        }&#10;        return Math.abs(a);&#10;    }&#10;    @SuppressWarnings(&quot;unused&quot;)&#10;    private static long lcmPair(long a, long b) {&#10;        if (a == 0 || b == 0) return 0;&#10;        long g = gcd(a, b);&#10;        return Math.abs(a / g * b);&#10;    }&#10;    @SuppressWarnings(&quot;unused&quot;)&#10;    private static long lcmArray(List&lt;Long&gt; nums) {&#10;        long result = nums.get(0);&#10;        for (int i = 1; i &lt; nums.size(); i++) {&#10;            result = lcmPair(result, nums.get(i));&#10;        }&#10;        return result;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/infovsn/homework/LcmTableView.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/infovsn/homework/LcmTableView.java" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.infovsn.homework;&#10;&#10;import android.content.Context;&#10;import android.graphics.Canvas;&#10;import android.graphics.Paint;&#10;import android.graphics.Rect;&#10;import android.util.AttributeSet;&#10;import android.util.TypedValue;&#10;import android.view.View;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class LcmTableView extends View {&#10;    private final Paint primesPaint = new Paint(Paint.ANTI_ALIAS_FLAG);&#10;    private final Paint numbersPaint = new Paint(Paint.ANTI_ALIAS_FLAG);&#10;    private final Paint linePaint = new Paint(Paint.ANTI_ALIAS_FLAG);&#10;&#10;    private final Rect textBounds = new Rect();&#10;&#10;    private List&lt;List&lt;Long&gt;&gt; rows = new ArrayList&lt;&gt;(); // includes initial row and final 1..1 row&#10;    private List&lt;Long&gt; primes = new ArrayList&lt;&gt;();     // size = rows.size()-1&#10;&#10;    // layout metrics&#10;    private float padding;&#10;    private float colGap;      // gap between numbers columns&#10;    private float primeGap;    // gap between primes and vertical line&#10;    private float numbersStartGap; // gap after vertical line before numbers text&#10;    private float textSize;&#10;    private float outerInset;  // extra spacing before primes for nicer look&#10;&#10;    private float[] colMaxWidths = new float[0];&#10;&#10;    public LcmTableView(Context context) { this(context, null); }&#10;    public LcmTableView(Context context, AttributeSet attrs) { this(context, attrs, 0); }&#10;    public LcmTableView(Context context, AttributeSet attrs, int defStyleAttr) {&#10;        super(context, attrs, defStyleAttr);&#10;        init(context);&#10;    }&#10;&#10;    private void init(Context ctx) {&#10;        textSize = sp(22);&#10;        padding = dp(12);           // a little more breathing room&#10;        colGap = dp(28);&#10;        primeGap = dp(10);          // primes closer to the divider&#10;        numbersStartGap = dp(16);   // more space between divider and numbers text&#10;        outerInset = dp(6);         // overall left breathing room before primes&#10;&#10;        primesPaint.setTextSize(textSize);&#10;        primesPaint.setColor(0xFF9C2780);&#10;        primesPaint.setTypeface(FontUtils.getRobotoMono(getContext()));&#10;&#10;        numbersPaint.setTextSize(textSize);&#10;        numbersPaint.setColor(0xFF222222);&#10;        numbersPaint.setTypeface(FontUtils.getRobotoMono(getContext()));&#10;&#10;        linePaint.setColor(0xFF222222);&#10;        linePaint.setStrokeWidth(dp(2));&#10;    }&#10;&#10;    public void setData(List&lt;List&lt;Long&gt;&gt; rowsNumbers, List&lt;Long&gt; primesUsed) {&#10;        this.rows = rowsNumbers != null ? rowsNumbers : new ArrayList&lt;&gt;();&#10;        this.primes = primesUsed != null ? primesUsed : new ArrayList&lt;&gt;();&#10;        // Precompute column max widths for alignment&#10;        computeColumnWidths();&#10;        requestLayout();&#10;        invalidate();&#10;    }&#10;&#10;    private void computeColumnWidths() {&#10;        if (rows == null || rows.isEmpty()) { colMaxWidths = new float[0]; return; }&#10;        int cols = rows.get(0).size();&#10;        colMaxWidths = new float[cols];&#10;        for (int c = 0; c &lt; cols; c++) colMaxWidths[c] = 0f;&#10;        for (List&lt;Long&gt; r : rows) {&#10;            for (int c = 0; c &lt; cols &amp;&amp; c &lt; r.size(); c++) {&#10;                String s = String.valueOf(r.get(c));&#10;                float w = numbersPaint.measureText(s);&#10;                if (w &gt; colMaxWidths[c]) colMaxWidths[c] = w;&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {&#10;        // Desired height based on number of rows&#10;        int rowsCount = rows != null ? rows.size() : 0;&#10;        float rowHeight = getRowHeight();&#10;        int desiredHeight = (int) (padding + rowsCount * rowHeight + padding);&#10;&#10;        int w = MeasureSpec.getSize(widthMeasureSpec);&#10;        int hMode = MeasureSpec.getMode(heightMeasureSpec);&#10;        int hSize = MeasureSpec.getSize(heightMeasureSpec);&#10;        int h;&#10;        if (hMode == MeasureSpec.EXACTLY) h = hSize;&#10;        else if (hMode == MeasureSpec.AT_MOST) h = Math.min(desiredHeight, hSize);&#10;        else h = desiredHeight;&#10;        setMeasuredDimension(w, h);&#10;    }&#10;&#10;    @Override&#10;    protected void onDraw(Canvas c) {&#10;        super.onDraw(c);&#10;        if (rows == null || rows.isEmpty()) return;&#10;&#10;        // compute x for primes column max width&#10;        float maxPrimeW = 0f;&#10;        for (int i = 0; i &lt; primes.size(); i++) {&#10;            String s = String.valueOf(primes.get(i));&#10;            float w = primesPaint.measureText(s);&#10;            if (w &gt; maxPrimeW) maxPrimeW = w;&#10;        }&#10;        float xPrimeStart = padding + outerInset;&#10;        float xLine = xPrimeStart + maxPrimeW + primeGap; // vertical line x&#10;        float xNumbersStart = xLine + numbersStartGap;&#10;&#10;        // Precompute total numbers width (fixed for all rows)&#10;        float numbersWidth = 0f;&#10;        for (int i = 0; i &lt; colMaxWidths.length; i++) {&#10;            numbersWidth += colMaxWidths[i];&#10;            if (i &lt; colMaxWidths.length - 1) numbersWidth += colGap;&#10;        }&#10;        float xNumbersEnd = xNumbersStart + numbersWidth;&#10;&#10;        float rowHeight = getRowHeight();&#10;        float baselineOffset = getBaselineOffset(numbersPaint);&#10;&#10;        // Determine vertical span to draw the vertical line exactly covering the rows area&#10;        float firstBaseline = padding + baselineOffset;&#10;        float topFirst = firstBaseline + numbersPaint.getFontMetrics().ascent;&#10;        float lastBaseline = padding + (rows.size() - 1) * rowHeight + baselineOffset;&#10;        float bottomLast = lastBaseline + numbersPaint.getFontMetrics().descent;&#10;&#10;        // Draw vertical line (cut at end of calculation)&#10;        c.drawLine(xLine, topFirst, xLine, bottomLast, linePaint);&#10;&#10;        // Draw rows&#10;        for (int r = 0; r &lt; rows.size(); r++) {&#10;            float baseY = padding + r * rowHeight + baselineOffset;&#10;&#10;            // Draw prime for rows after the first (align to corresponding row)&#10;            if (r &gt; 0 &amp;&amp; r - 1 &lt; primes.size()) {&#10;                String p = String.valueOf(primes.get(r - 1));&#10;                c.drawText(p, xPrimeStart, baseY, primesPaint);&#10;            }&#10;&#10;            // Draw numbers row cells using fixed column widths&#10;            List&lt;Long&gt; nums = rows.get(r);&#10;            float x = xNumbersStart;&#10;            for (int i = 0; i &lt; nums.size(); i++) {&#10;                String s = String.valueOf(nums.get(i));&#10;                c.drawText(s, x, baseY, numbersPaint);&#10;                float wCol = (i &lt; colMaxWidths.length ? colMaxWidths[i] : numbersPaint.measureText(s));&#10;                x += wCol + colGap;&#10;            }&#10;&#10;            // Draw a horizontal line under all rows except the last&#10;            if (r &lt; rows.size() - 1) {&#10;                float y = baseY + numbersPaint.getFontMetrics().descent + dp(6);&#10;                // Start exactly at the vertical divider; end at the end of numbers area&#10;                c.drawLine(xLine, y, xNumbersEnd, y, linePaint);&#10;            }&#10;        }&#10;    }&#10;&#10;    private float getRowHeight() {&#10;        Paint.FontMetrics fm = numbersPaint.getFontMetrics();&#10;        return (fm.descent - fm.ascent) + dp(10); // include extra spacing&#10;    }&#10;&#10;    private float getBaselineOffset(Paint p) {&#10;        Paint.FontMetrics fm = p.getFontMetrics();&#10;        return -fm.ascent; // distance from top of row to baseline&#10;    }&#10;&#10;    private float dp(float v) {&#10;        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, v, getResources().getDisplayMetrics());&#10;    }&#10;    private float sp(float v) {&#10;        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, v, getResources().getDisplayMetrics());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/lcm_division.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/lcm_division.xml" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:ads=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/content&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_above=&quot;@id/adView&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;8dp&quot;&gt;&#10;&#10;        &lt;!-- Top heading --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtHeading&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textColor=&quot;#2E7D32&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:paddingStart=&quot;8dp&quot;&#10;            android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;!-- Table area: primes | divider | numbers --&gt;&#10;        &lt;ScrollView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;0dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:fillViewport=&quot;true&quot;&gt;&#10;&#10;            &lt;com.infovsn.homework.LcmTableView&#10;                android:id=&quot;@+id/lcmTable&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot; /&gt;&#10;        &lt;/ScrollView&gt;&#10;&#10;        &lt;!-- Bottom answer line --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtAnswer&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textColor=&quot;#2E7D32&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:paddingStart=&quot;8dp&quot;&#10;            android:paddingTop=&quot;8dp&quot;&#10;            android:paddingBottom=&quot;4dp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;com.google.android.gms.ads.AdView&#10;        android:id=&quot;@+id/adView&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_alignParentBottom=&quot;true&quot;&#10;        android:layout_centerHorizontal=&quot;true&quot;&#10;        ads:adSize=&quot;BANNER&quot;&#10;        ads:adUnitId=&quot;@string/banner_ad_unit_id&quot; /&gt;&#10;&#10;&lt;/RelativeLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Unified red primary for top bar / app bars --&gt;&#10;    &lt;color name=&quot;colorPrimary&quot;&gt;@color/actionBarRed&lt;/color&gt;&#10;    &lt;color name=&quot;colorPrimaryDark&quot;&gt;@color/actionBarRedDark&lt;/color&gt;&#10;    &lt;color name=&quot;colorAccent&quot;&gt;@color/actionBarRed&lt;/color&gt;&#10;    &lt;!-- Red accent exclusively for top bar (still accessible as specific colors) --&gt;&#10;    &lt;color name=&quot;actionBarRed&quot;&gt;#F44336&lt;/color&gt;&#10;    &lt;color name=&quot;actionBarRedDark&quot;&gt;#D32F2F&lt;/color&gt;&#10;&#10;    &lt;!-- Core neutrals / surfaces --&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;backgroundLight&quot;&gt;#FAFAFA&lt;/color&gt; &lt;!-- Keep light neutral background --&gt;&#10;    &lt;color name=&quot;backgroundDark&quot;&gt;#F1F1F3&lt;/color&gt; &lt;!-- Repurposed to a light neutral (was dark) --&gt;&#10;&#10;    &lt;!-- Interactive / button specific new tones --&gt;&#10;    &lt;color name=&quot;menuButtonBgStart&quot;&gt;#FFF6F8&lt;/color&gt;&#10;    &lt;color name=&quot;menuButtonBgEnd&quot;&gt;#FFE7EE&lt;/color&gt;&#10;    &lt;color name=&quot;menuButtonStroke&quot;&gt;#FFD0DC&lt;/color&gt;&#10;    &lt;color name=&quot;menuButtonRipple&quot;&gt;#33FF6F88&lt;/color&gt; &lt;!-- 20% alpha ripple tint --&gt;&#10;&#10;    &lt;!-- Keypad colors (neutral gray) --&gt;&#10;    &lt;color name=&quot;keypadButton&quot;&gt;#F2F3F5&lt;/color&gt;&#10;    &lt;color name=&quot;keypadButtonStroke&quot;&gt;#D5D8DC&lt;/color&gt;&#10;    &lt;color name=&quot;keypadButtonStart&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;keypadButtonEnd&quot;&gt;#F2F3F5&lt;/color&gt;&#10;    &lt;color name=&quot;keypadRipple&quot;&gt;#26000000&lt;/color&gt;&#10;    &lt;!-- New deeper gray variant for former primary (equals / action) buttons --&gt;&#10;    &lt;color name=&quot;keypadPrimaryStart&quot;&gt;#ECEDEF&lt;/color&gt;&#10;    &lt;color name=&quot;keypadPrimaryEnd&quot;&gt;#DADCE0&lt;/color&gt;&#10;    &lt;color name=&quot;keypadPrimaryStroke&quot;&gt;#C5C8CC&lt;/color&gt;&#10;    &lt;color name=&quot;keypadIconTint&quot;&gt;#333333&lt;/color&gt;&#10;&#10;    &lt;!-- Text / on-surface colors --&gt;&#10;    &lt;color name=&quot;textPrimary&quot;&gt;#222222&lt;/color&gt;&#10;    &lt;color name=&quot;textSecondary&quot;&gt;#555555&lt;/color&gt;&#10;&#10;    &lt;!-- Legacy reference kept (maps to primary) --&gt;&#10;    &lt;color name=&quot;additionRed&quot;&gt;@color/colorPrimary&lt;/color&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;resources&gt;&#13;&#10;    &lt;!-- Unified red primary for top bar / app bars --&gt;&#13;&#10;    &lt;color name=&quot;colorPrimary&quot;&gt;@color/actionBarRed&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;colorPrimaryDark&quot;&gt;@color/actionBarRedDark&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;colorAccent&quot;&gt;@color/actionBarRed&lt;/color&gt;&#13;&#10;    &lt;!-- Red accent exclusively for top bar (still accessible as specific colors) --&gt;&#13;&#10;    &lt;color name=&quot;actionBarRed&quot;&gt;#F44336&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;actionBarRedDark&quot;&gt;#D32F2F&lt;/color&gt;&#13;&#10;&#13;&#10;    &lt;!-- Core neutrals / surfaces --&gt;&#13;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;backgroundLight&quot;&gt;#FAFAFA&lt;/color&gt; &lt;!-- Keep light neutral background --&gt;&#13;&#10;    &lt;color name=&quot;backgroundDark&quot;&gt;#F1F1F3&lt;/color&gt; &lt;!-- Repurposed to a light neutral (was dark) --&gt;&#13;&#10;&#13;&#10;    &lt;!-- Interactive / button specific new tones --&gt;&#13;&#10;    &lt;color name=&quot;menuButtonBgStart&quot;&gt;#FFF6F8&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;menuButtonBgEnd&quot;&gt;#FFE7EE&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;menuButtonStroke&quot;&gt;#FFD0DC&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;menuButtonRipple&quot;&gt;#33FF6F88&lt;/color&gt; &lt;!-- 20% alpha ripple tint --&gt;&#13;&#10;&#13;&#10;    &lt;!-- Keypad colors (neutral gray) --&gt;&#13;&#10;    &lt;color name=&quot;keypadButton&quot;&gt;#F2F3F5&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;keypadButtonStroke&quot;&gt;#D5D8DC&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;keypadButtonStart&quot;&gt;#FFFFFFFF&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;keypadButtonEnd&quot;&gt;#F2F3F5&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;keypadRipple&quot;&gt;#26000000&lt;/color&gt;&#13;&#10;    &lt;!-- New deeper gray variant for former primary (equals / action) buttons --&gt;&#13;&#10;    &lt;color name=&quot;keypadPrimaryStart&quot;&gt;#ECEDEF&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;keypadPrimaryEnd&quot;&gt;#DADCE0&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;keypadPrimaryStroke&quot;&gt;#C5C8CC&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;keypadIconTint&quot;&gt;#333333&lt;/color&gt;&#13;&#10;&#13;&#10;    &lt;!-- Text / on-surface colors --&gt;&#13;&#10;    &lt;color name=&quot;textPrimary&quot;&gt;#222222&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;textSecondary&quot;&gt;#555555&lt;/color&gt;&#13;&#10;&#13;&#10;    &lt;!-- Legacy reference kept (maps to primary) --&gt;&#13;&#10;    &lt;color name=&quot;additionRed&quot;&gt;@color/colorPrimary&lt;/color&gt;&#13;&#10;    &lt;color name=&quot;answerGreen&quot;&gt;#2E7D32&lt;/color&gt;&#13;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Maths Homework Helper&lt;/string&gt;&#10;&#10;    &lt;!-- Digit strings for button labels (avoid using integer resources for android:text) --&gt;&#10;    &lt;string name=&quot;digit_0&quot;&gt;0&lt;/string&gt;&#10;    &lt;string name=&quot;digit_1&quot;&gt;1&lt;/string&gt;&#10;    &lt;string name=&quot;digit_2&quot;&gt;2&lt;/string&gt;&#10;    &lt;string name=&quot;digit_3&quot;&gt;3&lt;/string&gt;&#10;    &lt;string name=&quot;digit_4&quot;&gt;4&lt;/string&gt;&#10;    &lt;string name=&quot;digit_5&quot;&gt;5&lt;/string&gt;&#10;    &lt;string name=&quot;digit_6&quot;&gt;6&lt;/string&gt;&#10;    &lt;string name=&quot;digit_7&quot;&gt;7&lt;/string&gt;&#10;    &lt;string name=&quot;digit_8&quot;&gt;8&lt;/string&gt;&#10;    &lt;string name=&quot;digit_9&quot;&gt;9&lt;/string&gt;&#10;&#10;    &lt;!-- (Legacy integer definitions retained but no longer used for text) --&gt;&#10;    &lt;integer name=&quot;one&quot;&gt;1&lt;/integer&gt;&#10;    &lt;integer name=&quot;two&quot;&gt;2&lt;/integer&gt;&#10;    &lt;integer name=&quot;three&quot;&gt;3&lt;/integer&gt;&#10;    &lt;integer name=&quot;four&quot;&gt;4&lt;/integer&gt;&#10;    &lt;integer name=&quot;five&quot;&gt;5&lt;/integer&gt;&#10;    &lt;integer name=&quot;six&quot;&gt;6&lt;/integer&gt;&#10;    &lt;integer name=&quot;seven&quot;&gt;7&lt;/integer&gt;&#10;    &lt;integer name=&quot;eight&quot;&gt;8&lt;/integer&gt;&#10;    &lt;integer name=&quot;nine&quot;&gt;9&lt;/integer&gt;&#10;    &lt;integer name=&quot;zero&quot;&gt;0&lt;/integer&gt;&#10;    &lt;!-- Use actual unicode characters instead of escape sequences with quotes --&gt;&#10;    &lt;string name=&quot;backspace&quot;&gt;⌫&lt;/string&gt;&#10;    &lt;string name=&quot;clear&quot;&gt;C&lt;/string&gt;&#10;    &lt;string name=&quot;add&quot;&gt;+&lt;/string&gt;&#10;    &lt;string name=&quot;minus&quot;&gt;-&lt;/string&gt;&#10;    &lt;string name=&quot;mult&quot;&gt;x&lt;/string&gt;&#10;    &lt;string name=&quot;div&quot;&gt;/&lt;/string&gt;&#10;    &lt;!-- Send-style arrow used instead of the word Result on equal buttons --&gt;&#10;    &lt;string name=&quot;equal&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;equal1&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;equal3&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;equal4&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;equal5&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;equal6&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;equal7&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;equal9&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;equal11&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;equal12&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;equal13&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;equal8&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;equal10&quot;&gt;.&lt;/string&gt;&#10;    &lt;string name=&quot;table&quot;&gt;Tables Number: &lt;/string&gt;&#10;    &lt;string name=&quot;back&quot;&gt;&amp;lt; Back&lt;/string&gt;&#10;    &lt;string name=&quot;hintq&quot;&gt;Enter the Number&lt;/string&gt;&#10;    &lt;string name=&quot;equal2&quot;&gt;➤&lt;/string&gt;&#10;    &lt;string name=&quot;div2&quot;&gt;÷&lt;/string&gt;&#10;    &lt;string name=&quot;inf&quot;&gt;infinity&lt;/string&gt;&#10;    &lt;string name=&quot;exc1&quot;&gt;Divisor exceeds maximum digits(4)&lt;/string&gt;&#10;    &lt;string name=&quot;exc2&quot;&gt;Dividend exceeds maximum digits(10)&lt;/string&gt;&#10;    &lt;string name=&quot;enter&quot;&gt;Enter&lt;/string&gt;&#10;    &lt;string name=&quot;hintq2&quot;&gt;To Separate Numbers press Enter(↲)&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;m1&quot;&gt;TABLES&lt;/string&gt;&#10;    &lt;string name=&quot;m2&quot;&gt;ADDITION&lt;/string&gt;&#10;    &lt;string name=&quot;m3&quot;&gt;SUBTRACTION&lt;/string&gt;&#10;    &lt;string name=&quot;m4&quot;&gt;MULTIPLICATION&lt;/string&gt;&#10;    &lt;string name=&quot;m5&quot;&gt;DIVISION&lt;/string&gt;&#10;    &lt;string name=&quot;m6&quot;&gt;ASCENDING ORDER&lt;/string&gt;&#10;    &lt;string name=&quot;m7&quot;&gt;DESCENDING ORDER&lt;/string&gt;&#10;    &lt;string name=&quot;m8&quot;&gt;LCM&lt;/string&gt;&#10;    &lt;string name=&quot;m9&quot;&gt;HCF/GCD&lt;/string&gt;&#10;    &lt;string name=&quot;m10&quot;&gt;SQUARE&lt;/string&gt;&#10;    &lt;string name=&quot;m11&quot;&gt;CUBE&lt;/string&gt;&#10;    &lt;string name=&quot;m12&quot;&gt;SQUARE ROOT&lt;/string&gt;&#10;    &lt;string name=&quot;m13&quot;&gt;CUBE ROOT&lt;/string&gt;&#10;    &lt;string name=&quot;m14&quot;&gt;EVEN NUMBERS&lt;/string&gt;&#10;    &lt;string name=&quot;m15&quot;&gt;ODD NUMBERS&lt;/string&gt;&#10;    &lt;string name=&quot;m16&quot;&gt;PRIME NUMBERS&lt;/string&gt;&#10;&#10;&#10;    &lt;string name=&quot;banner_ad_unit_id&quot;&gt;ca-app-pub-5127203822190674/8442269216&lt;/string&gt;&#10;    &lt;string name=&quot;result_label&quot;&gt;RESULT&lt;/string&gt;&#10;    &lt;string name=&quot;send&quot;&gt;Send&lt;/string&gt;&#10;&#10;    &lt;!-- Newly added for LCM screen validation --&gt;&#10;    &lt;string name=&quot;error_max_digits&quot;&gt;Maximum digits(%1$d) exceeded&lt;/string&gt;&#10;    &lt;!-- Removed single quotes around placeholder to avoid any formatting parser quirks --&gt;&#10;    &lt;string name=&quot;error_invalid_number&quot;&gt;Invalid number: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;error_enter_numbers_first&quot;&gt;Enter numbers first&lt;/string&gt;&#10;    &lt;string name=&quot;error_overflow&quot;&gt;Result too large (overflow)&lt;/string&gt;&#10;    &lt;string name=&quot;label_lcm&quot;&gt;LCM : %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;dot&quot;&gt;.&lt;/string&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;resources&gt;&#13;&#10;    &lt;string name=&quot;app_name&quot;&gt;Maths Homework Helper&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Digit strings for button labels (avoid using integer resources for android:text) --&gt;&#13;&#10;    &lt;string name=&quot;digit_0&quot;&gt;0&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;digit_1&quot;&gt;1&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;digit_2&quot;&gt;2&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;digit_3&quot;&gt;3&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;digit_4&quot;&gt;4&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;digit_5&quot;&gt;5&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;digit_6&quot;&gt;6&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;digit_7&quot;&gt;7&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;digit_8&quot;&gt;8&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;digit_9&quot;&gt;9&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- (Legacy integer definitions retained but no longer used for text) --&gt;&#13;&#10;    &lt;integer name=&quot;one&quot;&gt;1&lt;/integer&gt;&#13;&#10;    &lt;integer name=&quot;two&quot;&gt;2&lt;/integer&gt;&#13;&#10;    &lt;integer name=&quot;three&quot;&gt;3&lt;/integer&gt;&#13;&#10;    &lt;integer name=&quot;four&quot;&gt;4&lt;/integer&gt;&#13;&#10;    &lt;integer name=&quot;five&quot;&gt;5&lt;/integer&gt;&#13;&#10;    &lt;integer name=&quot;six&quot;&gt;6&lt;/integer&gt;&#13;&#10;    &lt;integer name=&quot;seven&quot;&gt;7&lt;/integer&gt;&#13;&#10;    &lt;integer name=&quot;eight&quot;&gt;8&lt;/integer&gt;&#13;&#10;    &lt;integer name=&quot;nine&quot;&gt;9&lt;/integer&gt;&#13;&#10;    &lt;integer name=&quot;zero&quot;&gt;0&lt;/integer&gt;&#13;&#10;    &lt;!-- Use actual unicode characters instead of escape sequences with quotes --&gt;&#13;&#10;    &lt;string name=&quot;backspace&quot;&gt;⌫&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;clear&quot;&gt;C&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;add&quot;&gt;+&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;minus&quot;&gt;-&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;mult&quot;&gt;x&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;div&quot;&gt;/&lt;/string&gt;&#13;&#10;    &lt;!-- Send-style arrow used instead of the word Result on equal buttons --&gt;&#13;&#10;    &lt;string name=&quot;equal&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal1&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal3&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal4&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal5&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal6&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal7&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal9&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal11&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal12&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal13&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal8&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal10&quot;&gt;.&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;table&quot;&gt;Tables Number: &lt;/string&gt;&#13;&#10;    &lt;string name=&quot;back&quot;&gt;&amp;lt; Back&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;hintq&quot;&gt;Enter the Number&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;equal2&quot;&gt;➤&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;div2&quot;&gt;÷&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;inf&quot;&gt;infinity&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;exc1&quot;&gt;Divisor exceeds maximum digits(4)&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;exc2&quot;&gt;Dividend exceeds maximum digits(10)&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;enter&quot;&gt;Enter&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;hintq2&quot;&gt;To Separate Numbers press Enter(↲)&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;string name=&quot;m1&quot;&gt;TABLES&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m2&quot;&gt;ADDITION&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m3&quot;&gt;SUBTRACTION&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m4&quot;&gt;MULTIPLICATION&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m5&quot;&gt;DIVISION&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m6&quot;&gt;ASCENDING ORDER&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m7&quot;&gt;DESCENDING ORDER&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m8&quot;&gt;LCM&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m9&quot;&gt;HCF/GCD&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m10&quot;&gt;SQUARE&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m11&quot;&gt;CUBE&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m12&quot;&gt;SQUARE ROOT&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m13&quot;&gt;CUBE ROOT&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m14&quot;&gt;EVEN NUMBERS&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m15&quot;&gt;ODD NUMBERS&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;m16&quot;&gt;PRIME NUMBERS&lt;/string&gt;&#13;&#10;&#13;&#10;&#13;&#10;    &lt;string name=&quot;banner_ad_unit_id&quot;&gt;ca-app-pub-5127203822190674/8442269216&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;result_label&quot;&gt;RESULT&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;send&quot;&gt;Send&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Newly added for LCM screen validation --&gt;&#13;&#10;    &lt;string name=&quot;error_max_digits&quot;&gt;Maximum digits(%1$d) exceeded&lt;/string&gt;&#13;&#10;    &lt;!-- Removed single quotes around placeholder to avoid any formatting parser quirks --&gt;&#13;&#10;    &lt;string name=&quot;error_invalid_number&quot;&gt;Invalid number: %1$s&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;error_enter_numbers_first&quot;&gt;Enter numbers first&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;error_overflow&quot;&gt;Result too large (overflow)&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;label_lcm&quot;&gt;LCM : %1$s&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;dot&quot;&gt;.&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;heading_lcm_of&quot;&gt;LCM of %1$s&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;label_lcm_chain&quot;&gt;LCM = %1$s = %2$s&lt;/string&gt;&#13;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>